name: PR Audit Report

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: "Date de début (YYYY-MM-DD)"
        required: true
        default: "2025-05-01"
      end_date:
        description: "Date de fin (YYYY-MM-DD)"
        required: true
        default: "2025-07-31"
      target_branch:
        description: "Branche cible (ex: main)"
        required: true
        default: "main"

permissions:
  contents: read
  pull-requests: read

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OWNER: ${{ github.repository_owner }}
  REPO:  ${{ github.event.repository.name }}

jobs:
  generate-report:
    runs-on: ubuntu-latest
    steps:
      - name: Install tools (jq + wkhtmltopdf)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq wkhtmltopdf

      - name: Build PR audit report (.txt)
        id: build_txt
        shell: bash
        env:
          START: ${{ inputs.start_date }}
          END:   ${{ inputs.end_date }}
          BRANCH: ${{ inputs.target_branch }}
        run: |
          set -euo pipefail

          REPORT_TXT="pr-audit-${START}_to_${END}.txt"

          api() {
            curl -fsSL \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "$1"
          }

          fetch_all_closed_prs() {
            local page=1
            local tmp="$(mktemp -d)"
            while :; do
              local url="https://api.github.com/repos/${OWNER}/${REPO}/pulls?state=closed&per_page=100&page=${page}"
              local out="${tmp}/prs_${page}.json"
              api "$url" > "$out"
              local len
              len="$(jq 'length' "$out")"
              [[ "$len" -eq 0 ]] && break
              page=$((page+1))
            done
            jq -s 'add' "${tmp}"/prs_*.json 2>/dev/null || echo "[]"
          }

          fetch_issue_comments() {
            local number="$1"
            local page=1
            local tmp="$(mktemp -d)"
            while :; do
              local url="https://api.github.com/repos/${OWNER}/${REPO}/issues/${number}/comments?per_page=100&page=${page}"
              local out="${tmp}/c_${page}.json"
              api "$url" > "$out"
              local len
              len="$(jq 'length' "$out")"
              [[ "$len" -eq 0 ]] && break
              page=$((page+1))
            done
            jq -s 'add' "${tmp}"/c_*.json 2>/dev/null || echo "[]"
          }

          {
            repo_upper=$(echo "${REPO}" | tr '[:lower:]' '[:upper:]')
            echo "${repo_upper} — PRs MERGÉES"
            echo "Branche cible: ${BRANCH}"
            echo "Période: ${START} → ${END}"
            echo "Généré le: $(date '+%d/%m/%Y %H:%M:%S')"
            echo "============================================================"
          } > "${REPORT_TXT}"

          fetch_all_closed_prs > all_prs.json

          jq --arg s "${START}" --arg e "${END}" --arg branch "${BRANCH}" '
            [ .[]
              | select(.merged_at != null)
              | select(.base.ref == $branch)
              | select(.merged_at[0:10] >= $s and .merged_at[0:10] <= $e)
            ]
            | sort_by(.merged_at) | reverse
          ' all_prs.json > merged_prs.json

          count="$(jq 'length' merged_prs.json)"
          if [[ "${count}" -eq 0 ]]; then
            echo "Pas de PRs mergées sur ${BRANCH} entre ${START} et ${END}." >> "${REPORT_TXT}"
          else
            for n in $(jq -r '.[].number' merged_prs.json); do
              jq -r --argjson num "${n}" '
                .[]
                | select(.number == $num)
                | "PR #\(.number) — \(.title)\n" +
                  "Auteur : \(.user.login)\n" +
                  "Créée : \(.created_at | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | strftime(\"%d/%m/%Y\"))\n" +
                  "Mergée : \(.merged_at | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | strftime(\"%d/%m/%Y\"))\n" +
                  "Statut : \(.state)\n"
              ' merged_prs.json >> "${REPORT_TXT}"

              comments_json="$(fetch_issue_comments "${n}")"
              ccount="$(jq 'length' <<<"${comments_json}")"
              if [[ "${ccount}" -eq 0 ]]; then
                echo "Commentaires : Aucun" >> "${REPORT_TXT}"
              else
                echo "Commentaires :" >> "${REPORT_TXT}"
                jq -r '.[] | "- \(.user.login) | \(.created_at | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | strftime(\"%d/%m/%Y\")) : \(.body|gsub("\r?\n"; " "))"' \
                  <<<"${comments_json}" >> "${REPORT_TXT}"
              fi

              echo "------------------------------------------------------------" >> "${REPORT_TXT}"
            done
          fi

          echo "TXT_READY=${REPORT_TXT}" >> $GITHUB_ENV

      - name: Convert TXT to PDF (wkhtmltopdf)
        shell: bash
        run: |
          set -euo pipefail
          HTML="report.html"
          PDF="${TXT_READY%.txt}.pdf"

          esc() { sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g'; }

          {
            echo '<!doctype html><html><head><meta charset="utf-8">'
            echo '<style>body{font-family: monospace; white-space: pre-wrap; font-size: 12px;}</style>'
            echo '</head><body><pre>'
            esc < "${TXT_READY}"
            echo '</pre></body></html>'
          } > "${HTML}"

          wkhtmltopdf "${HTML}" "${PDF}"

          echo "PDF_READY=${PDF}" >> $GITHUB_ENV

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-audit-report
          path: ${{ env.PDF_READY }}
